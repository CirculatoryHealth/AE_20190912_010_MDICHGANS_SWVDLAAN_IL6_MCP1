x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
# Global test
# compare_means(MCP1_pg_ug_2015_rank ~ Gender,  data = AEDB.CEA, method = "wilcox.test")
ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ug_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/ug]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "wilcox.test")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
# Global test
# compare_means(MCP1_pg_ug_2015_rank ~ Gender,  data = AEDB.CEA, method = "wilcox.test")
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ug_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/ug]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "wilcox.test")
ggpar(p1, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p2 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p2, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p3 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p3, legend = "bottom", legend.title = "Plaque vulnerability index")
TRAITS.PROTEIN.RANK.extra = c("MCP1_pg_ug_2015_rank", "MCP1_pg_ml_2015_rank",  "MCP1_rank")
GLM.results <- data.frame(matrix(NA, ncol = 16, nrow = 0))
for (protein in 1:length(TRAITS.PROTEIN.RANK.extra)) {
PROTEIN = TRAITS.PROTEIN.RANK.extra[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
TRAIT = "Plaque_Vulnerability_Index"
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M1, ORdate_epoch) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
print(DT::datatable(currentDF))
# print(nrow(currentDF))
print(str(currentDF))
print(class(currentDF[,TRAIT]))
table(currentDF$ORdate_year)
### univariate
# + Hypertension.composite + DiabetesStatus + SmokerCurrent +
#            Med.Statin.LLD + Med.all.antiplatelet + GFR_MDRD + BMI +
#            CAD_history + Stroke_history + Peripheral.interv + stenose
fit <- polr(currentDF[,TRAIT] ~ currentDF[,PROTEIN] + Age + Gender + ORdate_year,
data  =  currentDF,
Hess = TRUE)
# model_step <- stepAIC(fit, direction = "both", trace = FALSE)
# print(model_step)
print(summary(fit))
## store table
(ctable <- coef(summary(fit)))
##                                Value Std. Error t value
## pared                        1.04769     0.2658  3.9418
## public                      -0.05879     0.2979 -0.1974
## gpa                          0.61594     0.2606  2.3632
## unlikely|somewhat likely     2.20391     0.7795  2.8272
## somewhat likely|very likely  4.29936     0.8043  5.3453
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
print((ctable <- cbind(ctable, "p value" = p)))
}
TRAITS.PROTEIN.RANK.extra = c("MCP1_pg_ug_2015_rank", "MCP1_pg_ml_2015_rank",  "MCP1_rank")
GLM.results <- data.frame(matrix(NA, ncol = 16, nrow = 0))
for (protein in 1:length(TRAITS.PROTEIN.RANK.extra)) {
PROTEIN = TRAITS.PROTEIN.RANK.extra[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
TRAIT = "Plaque_Vulnerability_Index"
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M1, ORdate_epoch) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
# print(DT::datatable(currentDF))
# print(nrow(currentDF))
# print(str(currentDF))
# print(class(currentDF[,TRAIT]))
# table(currentDF$ORdate_year)
### univariate
# + Hypertension.composite + DiabetesStatus + SmokerCurrent +
#            Med.Statin.LLD + Med.all.antiplatelet + GFR_MDRD + BMI +
#            CAD_history + Stroke_history + Peripheral.interv + stenose
fit <- polr(currentDF[,TRAIT] ~ currentDF[,PROTEIN] + Age + Gender + ORdate_year,
data  =  currentDF,
Hess = TRUE)
# model_step <- stepAIC(fit, direction = "both", trace = FALSE)
# print(model_step)
print(summary(fit))
## store table
(ctable <- coef(summary(fit)))
##                                Value Std. Error t value
## pared                        1.04769     0.2658  3.9418
## public                      -0.05879     0.2979 -0.1974
## gpa                          0.61594     0.2606  2.3632
## unlikely|somewhat likely     2.20391     0.7795  2.8272
## somewhat likely|very likely  4.29936     0.8043  5.3453
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
print((ctable <- cbind(ctable, "p value" = p)))
}
levels(AEDB.CEA$Collagen.bin)
AEDB.CEA$Collagen.bin
# Plaque vulnerability
table(AEDB.CEA$Macrophages.bin)
table(AEDB.CEA$Fat.bin_10)
table(AEDB.CEA$Collagen.bin)
table(AEDB.CEA$SMC.bin)
table(AEDB.CEA$IPH.bin)
# SPSS code
#
# *** syntax- Plaque vulnerability**.
# COMPUTE Macro_instab = -999.
# IF macrophages.bin=2 Macro_instab=1.
# IF macrophages.bin=1 Macro_instab=0.
# EXECUTE.
#
# COMPUTE Fat10_instab = -999.
# IF Fat.bin_10=2 Fat10_instab=1.
# IF Fat.bin_10=1 Fat10_instab=0.
# EXECUTE.
#
# COMPUTE coll_instab=-999.
# IF Collagen.bin=2 coll_instab=0.
# IF Collagen.bin=1 coll_instab=1.
# EXECUTE.
#
#
# COMPUTE SMC_instab=-999.
# IF SMC.bin=2 SMC_instab=0.
# IF SMC.bin=1 SMC_instab=1.
# EXECUTE.
#
# COMPUTE IPH_instab=-999.
# IF IPH.bin=0 IPH_instab=0.
# IF IPH.bin=1 IPH_instab=1.
# EXECUTE.
#
# COMPUTE Instability=Macro_instab + Fat10_instab +  coll_instab + SMC_instab + IPH_instab.
# EXECUTE.
# Fix plaquephenotypes
attach(AEDB.CEA)
# mac instability
AEDB.CEA[,"MAC_Instability"] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == -999] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == "no/minor"] <- 0
AEDB.CEA$MAC_Instability[Macrophages.bin == "moderate/heavy"] <- 1
# fat instability
AEDB.CEA[,"FAT10_Instability"] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == -999] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " <10%"] <- 0
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " >10%"] <- 1
# col instability
AEDB.CEA[,"COL_Instability"] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == -999] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == "no/minor"] <- 1
AEDB.CEA$COL_Instability[Collagen.bin == "moderate/heavy"] <- 0
# smc instability
AEDB.CEA[,"SMC_Instability"] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == -999] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == "no/minor"] <- 1
AEDB.CEA$SMC_Instability[SMC.bin == "moderate/heavy"] <- 0
# iph instability
AEDB.CEA[,"IPH_Instability"] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == -999] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == "no"] <- 0
AEDB.CEA$IPH_Instability[IPH.bin == "yes"] <- 1
detach(AEDB.CEA)
table(AEDB.CEA$MAC_Instability, useNA = "ifany")
table(AEDB.CEA$FAT10_Instability, useNA = "ifany")
table(AEDB.CEA$COL_Instability, useNA = "ifany")
table(AEDB.CEA$SMC_Instability, useNA = "ifany")
table(AEDB.CEA$IPH_Instability, useNA = "ifany")
# creating vulnerability index
AEDB.CEA <- AEDB.CEA %>% mutate(Plaque_Vulnerability_Index = factor(rowSums(.[grep("_Instability", names(.))], na.rm = TRUE),
0 = "PVI 0",
# Plaque vulnerability
table(AEDB.CEA$Macrophages.bin)
table(AEDB.CEA$Fat.bin_10)
table(AEDB.CEA$Collagen.bin)
table(AEDB.CEA$SMC.bin)
table(AEDB.CEA$IPH.bin)
# SPSS code
#
# *** syntax- Plaque vulnerability**.
# COMPUTE Macro_instab = -999.
# IF macrophages.bin=2 Macro_instab=1.
# IF macrophages.bin=1 Macro_instab=0.
# EXECUTE.
#
# COMPUTE Fat10_instab = -999.
# IF Fat.bin_10=2 Fat10_instab=1.
# IF Fat.bin_10=1 Fat10_instab=0.
# EXECUTE.
#
# COMPUTE coll_instab=-999.
# IF Collagen.bin=2 coll_instab=0.
# IF Collagen.bin=1 coll_instab=1.
# EXECUTE.
#
#
# COMPUTE SMC_instab=-999.
# IF SMC.bin=2 SMC_instab=0.
# IF SMC.bin=1 SMC_instab=1.
# EXECUTE.
#
# COMPUTE IPH_instab=-999.
# IF IPH.bin=0 IPH_instab=0.
# IF IPH.bin=1 IPH_instab=1.
# EXECUTE.
#
# COMPUTE Instability=Macro_instab + Fat10_instab +  coll_instab + SMC_instab + IPH_instab.
# EXECUTE.
# Fix plaquephenotypes
attach(AEDB.CEA)
# mac instability
AEDB.CEA[,"MAC_Instability"] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == -999] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == "no/minor"] <- 0
AEDB.CEA$MAC_Instability[Macrophages.bin == "moderate/heavy"] <- 1
# fat instability
AEDB.CEA[,"FAT10_Instability"] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == -999] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " <10%"] <- 0
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " >10%"] <- 1
# col instability
AEDB.CEA[,"COL_Instability"] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == -999] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == "no/minor"] <- 1
AEDB.CEA$COL_Instability[Collagen.bin == "moderate/heavy"] <- 0
# smc instability
AEDB.CEA[,"SMC_Instability"] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == -999] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == "no/minor"] <- 1
AEDB.CEA$SMC_Instability[SMC.bin == "moderate/heavy"] <- 0
# iph instability
AEDB.CEA[,"IPH_Instability"] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == -999] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == "no"] <- 0
AEDB.CEA$IPH_Instability[IPH.bin == "yes"] <- 1
detach(AEDB.CEA)
table(AEDB.CEA$MAC_Instability, useNA = "ifany")
table(AEDB.CEA$FAT10_Instability, useNA = "ifany")
table(AEDB.CEA$COL_Instability, useNA = "ifany")
table(AEDB.CEA$SMC_Instability, useNA = "ifany")
table(AEDB.CEA$IPH_Instability, useNA = "ifany")
# creating vulnerability index
AEDB.CEA <- AEDB.CEA %>% mutate(Plaque_Vulnerability_Index = factor(rowSums(.[grep("_Instability", names(.))], na.rm = TRUE)),
)
table(AEDB.CEA$Plaque_Vulnerability_Index, useNA = "ifany")
# str(AEDB.CEA$Plaque_Vulnerability_Index)
library(sjlabelled)
attach(AEDB.CEA)
AEDB.CEA$yeartemp <- as.numeric(year(AEDB.CEA$dateok))
AEDB.CEA[,"ORyearGroup"] <- NA
AEDB.CEA$ORyearGroup[yeartemp <= 2007] <- "< 2007"
AEDB.CEA$ORyearGroup[yeartemp > 2007] <- "> 2007"
detach(AEDB.CEA)
table(AEDB.CEA$ORyearGroup, AEDB.CEA$ORdate_year)
# Global test
# compare_means(MCP1_pg_ug_2015_rank ~ Gender,  data = AEDB.CEA, method = "wilcox.test")
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ug_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/ug]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "wilcox.test")
ggpar(p1, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p2 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p2, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p3 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p3, legend = "bottom", legend.title = "Plaque vulnerability index")
# Global test
# compare_means(MCP1_pg_ug_2015_rank ~ Gender,  data = AEDB.CEA, method = "wilcox.test")
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ug_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/ug]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
add = "jitter") #+
# stat_compare_means(method = "wilcox.test")
ggpar(p1, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p2 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p2, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p3 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p3, legend = "bottom", legend.title = "Plaque vulnerability index")
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ug_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/ug]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "wilcox.test")
ggpar(p1, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p2 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_pg_ml_2015_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 2)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p2, legend = "bottom", legend.title = "Plaque vulnerability index")
# compare_means(MCP1_pg_ug_2015_rank ~ AgeGroup,  data = AEDB.CEA, method = "kruskal.test")
p3 <- ggpubr::ggboxplot(AEDB.CEA,
x = "Plaque_Vulnerability_Index",
y = "MCP1_rank",
xlab = "Plaque vulnerability index",
ylab = "MCP1 plaque [pg/mL]\n(INT, exp 1)",
color = "Plaque_Vulnerability_Index",
palette = "npg",
facet.by = "ORyearGroup",
add = "jitter") #+
# stat_compare_means(method = "kruskal.test")
ggpar(p3, legend = "bottom", legend.title = "Plaque vulnerability index")
TRAITS.PROTEIN.RANK.extra = c("MCP1_pg_ug_2015_rank", "MCP1_pg_ml_2015_rank",  "MCP1_rank")
GLM.results <- data.frame(matrix(NA, ncol = 16, nrow = 0))
for (protein in 1:length(TRAITS.PROTEIN.RANK.extra)) {
PROTEIN = TRAITS.PROTEIN.RANK.extra[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
TRAIT = "Plaque_Vulnerability_Index"
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M1, ORdate_epoch) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
# print(DT::datatable(currentDF))
# print(nrow(currentDF))
# print(str(currentDF))
# print(class(currentDF[,TRAIT]))
# table(currentDF$ORdate_year)
### univariate
# + Hypertension.composite + DiabetesStatus + SmokerCurrent +
#            Med.Statin.LLD + Med.all.antiplatelet + GFR_MDRD + BMI +
#            CAD_history + Stroke_history + Peripheral.interv + stenose
fit <- polr(currentDF[,TRAIT] ~ currentDF[,PROTEIN] + Age + Gender + ORdate_year,
data  =  currentDF,
Hess = TRUE)
# model_step <- stepAIC(fit, direction = "both", trace = FALSE)
# print(model_step)
print(summary(fit))
## store table
(ctable <- coef(summary(fit)))
##                                Value Std. Error t value
## pared                        1.04769     0.2658  3.9418
## public                      -0.05879     0.2979 -0.1974
## gpa                          0.61594     0.2606  2.3632
## unlikely|somewhat likely     2.20391     0.7795  2.8272
## somewhat likely|very likely  4.29936     0.8043  5.3453
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
print((ctable <- cbind(ctable, "p value" = p)))
}
DT::datatable(GLM.results)
# Save the data
cat("Writing results to Excel-file...\n")
### Univariate
write.xlsx(GLM.results,
file = paste0(OUT_loc, "/",Today,".AEDB.CEA.Bin.Uni.Protein.RANK.PVI.MODEL1.xlsx"),
row.names = FALSE, col.names = TRUE, sheetName = "Bin.Uni.Symptoms")
# Removing intermediates
cat("Removing intermediate files...\n")
rm(TRAIT, currentDF, GLM.results, GLM.results.TEMP, fit, model_step)
for (protein in 1:length(TRAITS.PROTEIN.RANK.extra)) {
PROTEIN = TRAITS.PROTEIN.RANK.extra[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
TRAIT = "Plaque_Vulnerability_Index"
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M2) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
# print(DT::datatable(currentDF))
# print(nrow(currentDF))
# print(str(currentDF))
# print(class(currentDF[,TRAIT]))
### univariate
fit <- polr(as.factor(currentDF[,TRAIT]) ~ currentDF[,PROTEIN] + Age + Gender + ORdate_year + Hypertension.composite + DiabetesStatus + SmokerStatus + Med.Statin.LLD + Med.all.antiplatelet + GFR_MDRD + BMI + MedHx_CVD + stenose,
data  =  currentDF,
Hess = TRUE)
print(summary(fit))
## store table
(ctable <- coef(summary(fit)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
print((ctable <- cbind(ctable, "p value" = p)))
}
sessionInfo()
save.image(paste0(PROJECT_loc, "/",Today,".",PROJECTNAME,".sample_selection.RData"))
