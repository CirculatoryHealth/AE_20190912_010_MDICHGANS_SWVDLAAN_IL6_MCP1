y = "MCP1_pg_ml_2015",
xlab = "Stenotic grade",
ylab = "MCP1 plaque [pg/mL]",
# color = "Gender",
# palette = c("#D5267B", "#1290D9"),
color = "#1290D9",
add = "jitter") +
stat_compare_means(method = "kruskal.test")
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.raw.Stenosis.pdf"), plot = last_plot())
compare_means(MCP1_pg_ml_2015 ~ StenoticGroup, group.by = "Gender", data = AEDB.CEA %>% filter(!is.na(StenoticGroup)), method = "kruskal.test")
ggpubr::ggboxplot(AEDB.CEA %>% filter(!is.na(StenoticGroup)),
x = c("StenoticGroup"),
y = "MCP1_pg_ml_2015",
xlab = "Stenotic grade per gender",
ylab = "MCP1 plaque [pg/mL]",
color = "Gender",
palette = c("#D5267B", "#1290D9"),
add = "jitter") +
stat_compare_means(aes(group = Gender), label = "p.format", method = "kruskal.test")
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.raw.Stenosis_byGender.pdf"), plot = last_plot())
AEDB.CEA$MCP1_rank <- qnorm((rank(AEDB.CEA$MCP1, na.last = "keep") - 0.5) / sum(!is.na(AEDB.CEA$MCP1)))
summary(AEDB.CEA$MCP1)
summary(AEDB.CEA$MCP1_pg_ug_2015)
ggpubr::ggscatter(AEDB.CEA,
x = "MCP1",
y = "MCP1_pg_ml_2015",
xlab = "MCP1 plaque [pg/mL] (exp. no. 1)",
ylab = "MCP1 plaque [pg/mL] (exp. no. 2)",
add = "reg.line", add.params = list(color = "#1290D9"),
conf.int = TRUE,
cor.coef = TRUE, cor.coeff.args = list(method = "spearman"))
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque_vs_plaque.raw.pdf"), plot = last_plot())
ggpubr::ggscatter(AEDB.CEA,
x = "MCP1_rank",
y = "MCP1_pg_ml_2015_rank",
xlab = "MCP1 plaque [pg/mL] (exp. no. 1)",
ylab = "MCP1 plaque [pg/mL] (exp. no. 2)",
add = "reg.line", add.params = list(color = "#1290D9"),
conf.int = TRUE,
cor.coef = TRUE, cor.coeff.args = list(method = "spearman"))
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque_vs_plaque.rank.pdf"), plot = last_plot())
library(dplyr)
table(AEDB.CEA$AgeGroup, AEDB.CEA$AsymptSympt2G)
table(AEDB.CEA$Gender, AEDB.CEA$AsymptSympt2G)
table(AEDB.CEA$AsymptSympt2G)
# ?ggpubr::ggboxplot()
my_comparisons <- list(c("Asymptomatic", "Symptomatic"))
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "AsymptSympt2G", y = "MCP1_pg_ml_2015_rank",
title = "MCP1 plaque [pg/mL] levels per symptom",
xlab = "Symptoms",
ylab = "MCP1 plaque [pg/mL]\n inverse-rank transformation",
color = "AsymptSympt2G",
palette = c(uithof_color[16], uithof_color[23]),
add = "dotplot", # Add dotplot
add.params = list(binwidth = 0.1, dotsize = 0.3)
) +
stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")
ggpar(p1, legend = c("right"), legend.title = "Symptoms")
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.AsymptSympt2G.pdf"), plot = last_plot())
rm(p1)
compare_means(MCP1_pg_ml_2015 ~ AsymptSympt2G, group.by = "Gender", data = AEDB.CEA, method = "kruskal.test")
p1 <- ggpubr::ggboxplot(AEDB.CEA,
x = "AsymptSympt2G", y = "MCP1_pg_ml_2015_rank",
title = "MCP1 plaque [pg/mL] levels per symptom by gender",
xlab = "Symptoms",
ylab = "MCP1 plaque [pg/mL]\n inverse-rank transformation",
color = "Gender",
palette = c("#D5267B", "#1290D9"),
add = "dotplot", # Add dotplot
add.params = list(binwidth = 0.1, dotsize = 0.3)
) +
stat_compare_means(aes(group = Gender), label = "p.format",  method = "wilcox.test")
ggpar(p1, legend = c("right"), legend.title = "Symptoms")
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.AsymptSympt2G.byGender.pdf"), plot = last_plot())
rm(p1)
library(ggplot2)
library(openxlsx)
model1_mcp1 <- read.xlsx(paste0(OUT_loc, "/", Today, ".AEDB.CEA.Bin.Uni.Protein.RANK.Symptoms.MODEL1.xlsx"))
model2_mcp1 <- read.xlsx(paste0(OUT_loc, "/", Today, ".AEDB.CEA.Bin.Multi.Protein.RANK.Symptoms.MODEL2.xlsx"))
model1_mcp1$model <- "univariate"
model2_mcp1$model <- "multivariate"
models_mcp1 <- rbind(model1_mcp1, model2_mcp1)
models_mcp1
dat <- data.frame(group = factor(c("Age, sex-adjusted", "Age, sex, and adjusted for risk factors"),
levels=c("Age, sex, and adjusted for risk factors", "Age, sex-adjusted")),
cen = c(models_mcp1$OR[models_mcp1$Predictor=="MCP1_pg_ml_2015_rank"]),
low = c(models_mcp1$low95CI[models_mcp1$Predictor=="MCP1_pg_ml_2015_rank"]),
high = c(models_mcp1$up95CI[models_mcp1$Predictor=="MCP1_pg_ml_2015_rank"]))
fp <- ggplot(data = dat, aes(x = group, y = cen, ymin = low, ymax = high)) +
geom_pointrange(linetype = 2, size = 1, colour = c("#1290D9", "#49A01D")) +
geom_hline(yintercept = 1, lty = 2) +  # add a dotted line at x=1 after flip
coord_flip(ylim = c(0.8, 1.7)) +  # flip coordinates (puts labels on y axis)
xlab("Model") + ylab("OR (95% CI) for symptomatic plaques") +
ggtitle("Plaque MCP-1 levels (1 SD increment, exp. #2, n = 1190+)") +
theme_minimal()  # use a white background
print(fp)
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.exp2.forest.pdf"), plot = fp)
rm(fp)
dat <- data.frame(group = factor(c("Age, sex-adjusted", "Age, sex, and adjusted for risk factors"),
levels=c("Age, sex, and adjusted for risk factors", "Age, sex-adjusted")),
cen = c(models_mcp1$OR[models_mcp1$Predictor=="MCP1_rank"]),
low = c(models_mcp1$low95CI[models_mcp1$Predictor=="MCP1_rank"]),
high = c(models_mcp1$up95CI[models_mcp1$Predictor=="MCP1_rank"]))
fp <- ggplot(data = dat, aes(x = group, y = cen, ymin = low, ymax = high)) +
geom_pointrange(linetype = 2, size = 1, colour = c("#1290D9", "#49A01D")) +
geom_hline(yintercept = 1, lty = 2) +  # add a dotted line at x=1 after flip
coord_flip(ylim = c(0.8, 1.7)) +  # flip coordinates (puts labels on y axis)
xlab("Model") + ylab("OR (95% CI) for symptomatic plaques") +
ggtitle("Plaque MCP-1 levels (1 SD increment, exp. #1, n = 490+)") +
theme_minimal()  # use a white background
print(fp)
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.exp1.forest.pdf"), plot = fp)
rm(fp)
cytokines <- c("IL2", "IL4", "IL5", "IL6", "IL8", "IL9", "IL10", "IL12", "IL13", "IL21",
"INFG", "TNFA", "MIF", "MCP1", "MIP1a", "RANTES", "MIG", "IP10", "Eotaxin1",
"TARC", "PARC", "MDC", "OPG", "sICAM1", "VEGFA", "TGFB")
metalloproteinases <- c("MMP2", "MMP8", "MMP9")
# fix names
names(AEDB.CEA)[names(AEDB.CEA) == "VEFGA"] <- "VEGFA"
proteins_of_interest <- c(cytokines, metalloproteinases)
proteins_of_interest_rank = unlist(lapply(proteins_of_interest, paste0, "_rank"))
# make variables numerics()
AEDB.CEA <- AEDB.CEA %>%
mutate_each(funs(as.numeric), proteins_of_interest)
for(PROTEIN in 1:length(proteins_of_interest)){
# UCORBIOGSAqc$Z <- NULL
var.temp.rank = proteins_of_interest_rank[PROTEIN]
var.temp = proteins_of_interest[PROTEIN]
cat(paste0("\nSelecting ", var.temp, " and standardising: ", var.temp.rank,".\n"))
cat(paste0("* changing ", var.temp, " to numeric.\n"))
# AEDB.CEA <-  AEDB.CEA %>% mutate(AEDB.CEA[,var.temp] == replace(AEDB.CEA[,var.temp], AEDB.CEA[,var.temp]==0, NA))
AEDB.CEA[,var.temp][AEDB.CEA[,var.temp]==0.000000]=NA
cat(paste0("* standardising ", var.temp,
" (mean: ",round(mean(!is.na(AEDB.CEA[,var.temp])), digits = 6),
", n = ",sum(!is.na(AEDB.CEA[,var.temp])),").\n"))
AEDB.CEA <- AEDB.CEA %>%
mutate_at(vars(var.temp),
# list(Z = ~ (AEDB.CEA[,var.temp] - mean(AEDB.CEA[,var.temp], na.rm = TRUE))/sd(AEDB.CEA[,var.temp], na.rm = TRUE))
list(RANK = ~ qnorm((rank(AEDB.CEA[,var.temp], na.last = "keep") - 0.5) / sum(!is.na(AEDB.CEA[,var.temp]))))
)
# str(UCORBIOGSAqc$Z)
cat(paste0("* renaming RANK to ", var.temp.rank,".\n"))
AEDB.CEA[,var.temp.rank] <- NULL
names(AEDB.CEA)[names(AEDB.CEA) == "RANK"] <- var.temp.rank
}
# rm(var.temp, var.temp.rank)
proteins_of_interest_rank_mcp1 <- c("MCP1_pg_ml_2015_rank", proteins_of_interest_rank)
proteins_of_interest_mcp1 <- c("MCP1_pg_ml_2015", proteins_of_interest)
for(PROTEIN in proteins_of_interest_mcp1){
cat(paste0("Plotting protein ", PROTEIN, ".\n"))
p1 <- ggpubr::gghistogram(AEDB.CEA, PROTEIN,
# y = "..count..",
color = "white",
fill = "Gender",
palette = c("#1290D9", "#DB003F"),
add = "mean",
# rug = TRUE,
# add.params =  list(color = "black", linetype = 2),
title = paste0(PROTEIN, " plaque levels"),
xlab = "",
ggtheme = theme_minimal())
print(p1)
}
for(PROTEIN in proteins_of_interest_rank_mcp1){
cat(paste0("Plotting protein ", PROTEIN, ".\n"))
p1 <- ggpubr::gghistogram(AEDB.CEA, PROTEIN,
# y = "..count..",
color = "white",
fill = "Gender",
palette = c("#1290D9", "#DB003F"),
add = "mean",
# rug = TRUE,
# add.params =  list(color = "black", linetype = 2),
title = paste0(PROTEIN, " plaque levels"),
xlab = "inverse-normal transformation",
ggtheme = theme_minimal())
print(p1)
}
# Installation of ggcorrplot()
# --------------------------------
if(!require(devtools))
install.packages("devtools")
devtools::install_github("kassambara/ggcorrplot")
library(ggcorrplot)
# Creating matrix - inverse-rank transformation
# --------------------------------
AEDB.CEA.temp <- subset(AEDB.CEA,
select = c(proteins_of_interest_rank_mcp1)
)
# str(AEDB.CEA.temp)
AEDB.CEA.matrix.RANK <- as.matrix(AEDB.CEA.temp)
rm(AEDB.CEA.temp)
corr_biomarkers.rank <- round(cor(AEDB.CEA.matrix.RANK,
use = "pairwise.complete.obs", #the correlation or covariance between each pair of variables is computed using all complete pairs of observations on those variables
method = "spearman"), 3)
# corr_biomarkers.rank
rename_proteins_of_interest_mcp1 <- c("MCP1 (L, exp2, pg/mL)",
"IL2", "IL4", "IL5", "IL6", "IL8", "IL9", "IL10", "IL12",
"IL13 (L)", "IL21 (L)",
"INFG", "TNFA", "MIF (L)",
"MCP1 (L, exp1)", "MIP1a (L)", "RANTES (L)", "MIG (L)", "IP10 (L)",
"Eotaxin1 (L)", "TARC (L)", "PARC (L)", "MDC (L)",
"OPG (L)", "sICAM1 (L)", "VEGFA (E)", "TGFB (E)", "MMP2 (a)", "MMP8 (a)", "MMP9 (a)")
colnames(corr_biomarkers.rank) <- c(rename_proteins_of_interest_mcp1)
rownames(corr_biomarkers.rank) <- c(rename_proteins_of_interest_mcp1)
corr_biomarkers_p.rank <- ggcorrplot::cor_pmat(AEDB.CEA.matrix.RANK, use = "pairwise.complete.obs", method = "spearman")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
corr_biomarkers.rank.df <- flattenCorrMatrix(corr_biomarkers.rank, corr_biomarkers_p.rank)
names(corr_biomarkers.rank.df)[names(corr_biomarkers.rank.df) == "row"] <- "Cytokine_X"
names(corr_biomarkers.rank.df)[names(corr_biomarkers.rank.df) == "column"] <- "CytokineY"
names(corr_biomarkers.rank.df)[names(corr_biomarkers.rank.df) == "cor"] <- "SpearmanRho"
DT::datatable(corr_biomarkers.rank.df)
fwrite(corr_biomarkers.rank.df, file = paste0(OUT_loc, "/",Today,".correlation_cytokines.txt"))
# Add correlation coefficients
# --------------------------------
# argument lab = TRUE
p1 <- ggcorrplot(corr_biomarkers.rank,
method = "square",
type = "lower",
title = "Cross biomarker correlations",
show.legend = TRUE, legend.title = bquote("Spearman's"~italic(rho)),
ggtheme = ggplot2::theme_minimal, outline.color = "#FFFFFF",
show.diag = TRUE,
hc.order = FALSE,
lab = FALSE,
digits = 3,
tl.cex = 6,
# xlab = c("MCP1"),
# p.mat = corr_biomarkers_p.rank, sig.level = 0.05,
colors = c("#1290D9", "#FFFFFF", "#E55738"))
p1
ggsave(filename = paste0(PLOT_loc, "/", Today, ".correlation_cytokines.png"), plot = last_plot())
ggsave(filename = paste0(PLOT_loc, "/", Today, ".correlation_cytokines.pdf"), plot = last_plot())
rm(p1)
temp <- subset(corr_biomarkers.rank.df, Cytokine_X == "MCP1 (L, exp2, pg/mL)" )
temp$p_log10 <- -log10(temp$p)
p_threshold <- -log10(0.05/29)
p_threshold
p1 <- ggbarplot(temp, x = "CytokineY", y = "SpearmanRho",
fill = "CytokineY",               # change fill color by cyl
# color = "white",            # Set bar border colors to white
palette = uithof_color,            # jco journal color palett. see ?ggpar
xlab = "Cytokine",
ylab = expression("Spearman's"~italic(rho)),
sort.val = "desc",          # Sort the value in dscending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 45, # Rotate vertically x axis texts
cex = 0.8
)
ggpar(p1, legend = "bottom",
legend.title = "") +
theme(axis.text.x = element_text(size = 9),
axis.text.y = element_text(size = 9))
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.barplot_pgmL.MCP1_exp2_vs_Cytokines.png"), plot = last_plot())
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.barplot_pgmL.MCP1_exp2_vs_Cytokines.pdf"), plot = last_plot())
rm(p1)
temp <- subset(corr_biomarkers.rank.df, Cytokine_X == "MCP1 (L, exp1)" )
temp$p_log10 <- -log10(temp$p)
p_threshold <- -log10(0.05/29)
p_threshold
p1 <- ggbarplot(temp, x = "CytokineY", y = "SpearmanRho",
fill = "CytokineY",               # change fill color by cyl
# color = "white",            # Set bar border colors to white
palette = uithof_color,            # jco journal color palett. see ?ggpar
xlab = "Cytokine",
ylab = expression("Spearman's"~italic(rho)),
sort.val = "desc",          # Sort the value in dscending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 45, # Rotate vertically x axis texts
cex = 0.8
)
ggpar(p1, legend = "bottom",
legend.title = "") +
theme(axis.text.x = element_text(size = 9),
axis.text.y = element_text(size = 9))
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.barplot_pgmL.MCP1_exp1_vs_Cytokines.png"), plot = last_plot())
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.barplot_pgmL.MCP1_exp1_vs_Cytokines.pdf"), plot = last_plot())
rm(p1)
temp <- subset(corr_biomarkers.rank.df, Cytokine_X == "MCP1 (L, exp2, pg/mL)" )
temp$p_log10 <- -log10(temp$p)
p_threshold <- -log10(0.05/29)
p_threshold
p1 <- ggdotchart(temp, x = "CytokineY", y = "p_log10",
color = "CytokineY", #fill = "CytokineY",                              # Color by groups
palette = uithof_color, # Custom color palette
xlab = "Cytokine",
ylab = expression(log[10]~"("~italic(p)~")-value"),
ylim = c(0, 9),
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = FALSE,                                # Rotate vertically
# group = "CytokineY",                                # Order by groups
dot.size = 8,                                 # Large dot size
label = round(temp$SpearmanRho, digits = 3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 8,
vjust = 0.5)
)
ggpar(p1, legend = "",
legend.title = "") +
theme(axis.text.x = element_text(size = 9),
axis.text.y = element_text(size = 9))
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.dotchart.MCP1_vs_Cytokines.png"), plot = last_plot())
ggsave(file = paste0(PLOT_loc, "/",Today,".AEDB.CEA.MCP1.plaque.dotchart.MCP1_vs_Cytokines.pdf"), plot = last_plot())
rm(temp, p1)
GLM.results <- data.frame(matrix(NA, ncol = 15, nrow = 0))
cat("Running linear regression...\n")
for (protein in 1:length(TRAITS.PROTEIN.RANK)) {
PROTEIN = TRAITS.PROTEIN.RANK[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
for (trait in 1:length(proteins_of_interest_rank)) {
TRAIT = proteins_of_interest_rank[trait]
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M1) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
# print(DT::datatable(currentDF))
# print(nrow(currentDF))
# print(str(currentDF))
### univariate
fit <- lm(currentDF[,PROTEIN] ~ currentDF[,TRAIT] + Age + Gender + ORdate_year, data = currentDF)
model_step <- stepAIC(fit, direction = "both", trace = FALSE)
print(model_step)
print(summary(fit))
GLM.results.TEMP <- data.frame(matrix(NA, ncol = 15, nrow = 0))
GLM.results.TEMP[1,] = GLM.CON(fit, "AEDB.CEA", PROTEIN, TRAIT, verbose = TRUE)
GLM.results = rbind(GLM.results, GLM.results.TEMP)
}
}
cat("Edit the column names...\n")
colnames(GLM.results) = c("Dataset", "Predictor", "Trait",
"Beta", "s.e.m.",
"OR", "low95CI", "up95CI",
"T-value", "P-value", "r^2", "r^2_adj", "AE_N", "Model_N", "Perc_Miss")
cat("Correct the variable types...\n")
GLM.results$Beta <- as.numeric(GLM.results$Beta)
GLM.results$s.e.m. <- as.numeric(GLM.results$s.e.m.)
GLM.results$OR <- as.numeric(GLM.results$OR)
GLM.results$low95CI <- as.numeric(GLM.results$low95CI)
GLM.results$up95CI <- as.numeric(GLM.results$up95CI)
GLM.results$`T-value` <- as.numeric(GLM.results$`T-value`)
GLM.results$`P-value` <- as.numeric(GLM.results$`P-value`)
GLM.results$`r^2` <- as.numeric(GLM.results$`r^2`)
GLM.results$`r^2_adj` <- as.numeric(GLM.results$`r^2_adj`)
GLM.results$`AE_N` <- as.numeric(GLM.results$`AE_N`)
GLM.results$`Model_N` <- as.numeric(GLM.results$`Model_N`)
GLM.results$`Perc_Miss` <- as.numeric(GLM.results$`Perc_Miss`)
DT::datatable(GLM.results)
# Save the data
cat("Writing results to Excel-file...\n")
### Univariate
library(openxlsx)
write.xlsx(GLM.results,
file = paste0(OUT_loc, "/",Today,".AEDB.CEA.Con.Uni.MCP1_Plaque.Cytokines_Plaques.RANK.MODEL1.xlsx"),
row.names = FALSE, col.names = TRUE, sheetName = "Con.Uni.PlaquePheno")
# Removing intermediates
cat("Removing intermediate files...\n")
rm(TRAIT, trait, currentDF, GLM.results, GLM.results.TEMP, fit, model_step)
GLM.results <- data.frame(matrix(NA, ncol = 15, nrow = 0))
cat("Running linear regression...\n")
for (protein in 1:length(TRAITS.PROTEIN.RANK)) {
PROTEIN = TRAITS.PROTEIN.RANK[protein]
cat(paste0("\nAnalysis of ",PROTEIN,".\n"))
for (trait in 1:length(proteins_of_interest_rank)) {
TRAIT = proteins_of_interest_rank[trait]
cat(paste0("\n- processing ",TRAIT,"\n\n"))
currentDF <- as.data.frame(AEDB.CEA %>%
dplyr::select(., PROTEIN, TRAIT, COVARIATES_M2) %>%
filter(complete.cases(.))) %>%
filter_if(~is.numeric(.), all_vars(!is.infinite(.)))
# for debug
# print(DT::datatable(currentDF))
# print(nrow(currentDF))
# print(str(currentDF))
### univariate
fit <- lm(currentDF[,PROTEIN] ~ currentDF[,TRAIT] + Age + Gender + ORdate_year +
Hypertension.composite + DiabetesStatus + SmokerStatus +
Med.Statin.LLD + Med.all.antiplatelet + GFR_MDRD + BMI +
MedHx_CVD + stenose,
data = currentDF)
model_step <- stepAIC(fit, direction = "both", trace = FALSE)
print(model_step)
print(summary(fit))
GLM.results.TEMP <- data.frame(matrix(NA, ncol = 15, nrow = 0))
GLM.results.TEMP[1,] = GLM.CON(fit, "AEDB.CEA", PROTEIN, TRAIT, verbose = TRUE)
GLM.results = rbind(GLM.results, GLM.results.TEMP)
}
}
cat("Edit the column names...\n")
colnames(GLM.results) = c("Dataset", "Predictor", "Trait",
"Beta", "s.e.m.",
"OR", "low95CI", "up95CI",
"T-value", "P-value", "r^2", "r^2_adj", "AE_N", "Model_N", "Perc_Miss")
cat("Correct the variable types...\n")
GLM.results$Beta <- as.numeric(GLM.results$Beta)
GLM.results$s.e.m. <- as.numeric(GLM.results$s.e.m.)
GLM.results$OR <- as.numeric(GLM.results$OR)
GLM.results$low95CI <- as.numeric(GLM.results$low95CI)
GLM.results$up95CI <- as.numeric(GLM.results$up95CI)
GLM.results$`T-value` <- as.numeric(GLM.results$`T-value`)
GLM.results$`P-value` <- as.numeric(GLM.results$`P-value`)
GLM.results$`r^2` <- as.numeric(GLM.results$`r^2`)
GLM.results$`r^2_adj` <- as.numeric(GLM.results$`r^2_adj`)
GLM.results$`AE_N` <- as.numeric(GLM.results$`AE_N`)
GLM.results$`Model_N` <- as.numeric(GLM.results$`Model_N`)
GLM.results$`Perc_Miss` <- as.numeric(GLM.results$`Perc_Miss`)
DT::datatable(GLM.results)
# Save the data
cat("Writing results to Excel-file...\n")
### Univariate
library(openxlsx)
write.xlsx(GLM.results,
file = paste0(OUT_loc, "/",Today,".AEDB.CEA.Con.Multi.MCP1_Plaque.Cytokines_Plaques.RANK.MODEL2.xlsx"),
row.names = FALSE, col.names = TRUE, sheetName = "Con.Multi.PlaquePheno")
# Removing intermediates
cat("Removing intermediate files...\n")
rm(TRAIT, trait, currentDF, GLM.results, GLM.results.TEMP, fit, model_step)
# Plaque vulnerability
table(AEDB.CEA$Macrophages.bin)
table(AEDB.CEA$Fat.bin_10)
table(AEDB.CEA$Collagen.bin)
table(AEDB.CEA$SMC.bin)
table(AEDB.CEA$IPH.bin)
# SPSS code
#
# *** syntax- Plaque vulnerability**.
# COMPUTE Macro_instab = -999.
# IF macrophages.bin=2 Macro_instab=1.
# IF macrophages.bin=1 Macro_instab=0.
# EXECUTE.
#
# COMPUTE Fat10_instab = -999.
# IF Fat.bin_10=2 Fat10_instab=1.
# IF Fat.bin_10=1 Fat10_instab=0.
# EXECUTE.
#
# COMPUTE coll_instab=-999.
# IF Collagen.bin=2 coll_instab=0.
# IF Collagen.bin=1 coll_instab=1.
# EXECUTE.
#
#
# COMPUTE SMC_instab=-999.
# IF SMC.bin=2 SMC_instab=0.
# IF SMC.bin=1 SMC_instab=1.
# EXECUTE.
#
# COMPUTE IPH_instab=-999.
# IF IPH.bin=0 IPH_instab=0.
# IF IPH.bin=1 IPH_instab=1.
# EXECUTE.
#
# COMPUTE Instability=Macro_instab + Fat10_instab +  coll_instab + SMC_instab + IPH_instab.
# EXECUTE.
# Fix plaquephenotypes
attach(AEDB.CEA)
# mac instability
AEDB.CEA[,"MAC_Instability"] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == -999] <- NA
AEDB.CEA$MAC_Instability[Macrophages.bin == "no/minor"] <- 0
AEDB.CEA$MAC_Instability[Macrophages.bin == "moderate/heavy"] <- 1
# fat instability
AEDB.CEA[,"FAT10_Instability"] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == -999] <- NA
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " <10%"] <- 0
AEDB.CEA$FAT10_Instability[Fat.bin_10 == " >10%"] <- 1
# col instability
AEDB.CEA[,"COL_Instability"] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == -999] <- NA
AEDB.CEA$COL_Instability[Collagen.bin == "no/minor"] <- 1
AEDB.CEA$COL_Instability[Collagen.bin == "moderate/heavy"] <- 0
# smc instability
AEDB.CEA[,"SMC_Instability"] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == -999] <- NA
AEDB.CEA$SMC_Instability[SMC.bin == "no/minor"] <- 1
AEDB.CEA$SMC_Instability[SMC.bin == "moderate/heavy"] <- 0
# iph instability
AEDB.CEA[,"IPH_Instability"] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == -999] <- NA
AEDB.CEA$IPH_Instability[IPH.bin == "no"] <- 0
AEDB.CEA$IPH_Instability[IPH.bin == "yes"] <- 1
detach(AEDB.CEA)
table(AEDB.CEA$MAC_Instability, useNA = "ifany")
table(AEDB.CEA$FAT10_Instability, useNA = "ifany")
table(AEDB.CEA$COL_Instability, useNA = "ifany")
table(AEDB.CEA$SMC_Instability, useNA = "ifany")
table(AEDB.CEA$IPH_Instability, useNA = "ifany")
# creating vulnerability index
AEDB.CEA <- AEDB.CEA %>% mutate(Plaque_Vulnerability_Index = factor(rowSums(.[grep("_Instability", names(.))], na.rm = TRUE)),
)
table(AEDB.CEA$Plaque_Vulnerability_Index, useNA = "ifany")
# str(AEDB.CEA$Plaque_Vulnerability_Index)
library(sjlabelled)
attach(AEDB.CEA)
AEDB.CEA$yeartemp <- as.numeric(year(AEDB.CEA$dateok))
AEDB.CEA[,"ORyearGroup"] <- NA
AEDB.CEA$ORyearGroup[yeartemp <= 2007] <- "< 2007"
